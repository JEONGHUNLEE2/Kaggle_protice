import numpy as np
import pandas as pd

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))
        
import seaborn as sns
import matplotlib.pyplot as plt

from IPython.display import set_matplotlib_formats
set_matplotlib_formats("retina")

plt.style.use("seaborn-whitegrid")

raw = pd.read_csv("C:/Users/jeong/Documents/KaggleStruggle/kaggle_survey_2020_responses.csv", low_memory=False)
raw.shape

question = raw.iloc[0]
question

answer = raw.drop([0])
answer

answer.info()

question["Q1"]

answer["Q1"].value_counts(normalize = True)*100 #빈도수

answer["Q1"].value_counts().sort_index().plot.bar()

sns.countplot(data = answer.sort_values("Q1"), x = "Q1",
              palette = "Blues_r").set_title(question["Q1"])

question_no = "Q2"
Q2 = answer[question_no].value_counts()
Q2

question["Q1"]

def show_countplot_by_qno(qno):
    sns.countplot(data = answer, y= qno).set_title(question[qno])
    
show_countplot_by_qno("Q1")

def show_countplot_by_qno(qno, fsize = (10,6)):
    
    plt.figure(figsize =fsize)
    sns.countplot(data = answer, y= qno).set_title(question[qno])
    
show_countplot_by_qno("Q1")

q1_cols = answer["Q1"].value_counts().sort_index().index.tolist()
q1_cols

def show_countplot_by_qno(qno, fsize = (10,6), order = None):
    if not order :
        order = answer[qno].value_counts().index
    
    plt.figure(figsize =fsize)
    sns.countplot(data = answer, y= qno,
                  order = order, palette = "Blues_r", #r 빼면 빈도수 낮은게 찐해짐
                 ).set_title(question[qno])
    
show_countplot_by_qno("Q2")

show_countplot_by_qno("Q6")

show_countplot_by_qno("Q3", fsize = (12,12))

q6_cols = ['I have nerver written code', '< 1 years', '1-2 years', '3-5 years',
          '5-10 years','10-20 years', '20+ years']
          
show_countplot_by_qno("Q6", order = q6_cols)

question.filter(regex = "Q7")[0].split("-")[0]

answer_Q7 = answer.filter(regex = "Q7")
answer_Q7

answer_Q7.notnull().sum()

answer_Q7_desc = answer_Q7.describe()
answer_Q7_desc.loc[["top","count"]].T.set_index("top").plot.bar()

answer_Q7_count = answer_Q7_desc.loc[["top","count"]].T
answer_Q7_count = answer_Q7_count.set_index("top")
answer_Q7_count = answer_Q7_count.sort_values("count", ascending = False)
answer_Q7_count

sns.barplot(data = answer_Q7_count, 
            palette ="Blues_r",y = answer_Q7_count.index, x="count")
            
sns.barplot(data = answer_Q7_count, 
            palette ="Blues_r",y = answer_Q7_count.index, x="count").set_title(q7_title)
            
q7_title = question.filter(regex = "Q7")[0].split("-")[0]

def get_question_title_by_qno(qno) :
    if qno in question.index: 
        return question[qno]
    else : 
        q_no = question.filter(regex = qno)[0].split("-")[0]
        return q_no
    
get_question_title_by_qno("Q7")

def get_multiple_choice_answer_by_qno(qno):
    df_answer = answer.filter(regex = qno)
    answer_desc = df_answer.describe()
    answer_count = answer_desc.loc[["top", "count"]].T.set_index("top")
    answer_count = answer_count.sort_values("count",ascending = False)
    return answer_count

get_multiple_choice_answer_by_qno("Q7")

get_multiple_choice_answer_by_qno("Q9")

def show_multiple_choice_bar_plot_by_qno(qno):
    multiple_choice_answer = get_multiple_choice_answer_by_qno(qno)
    
    sns.barplot(data = multiple_choice_answer,
               y = multiple_choice_answer.index,
                x = "count", 
                palette = "Blues_r").set_title(get_question_title_by_qno(qno))
    
show_multiple_choice_bar_plot_by_qno("Q10")

show_multiple_choice_bar_plot_by_qno("Q7")
